// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/auction.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SurplusAuction struct {
	AuctionId        uint64                                        `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	OutflowToken     github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,2,opt,name=outflow_token,json=outflowToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token" yaml:"outflow_token"`
	InflowToken      github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=inflow_token,json=inflowToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token" yaml:"inflow_token"`
	ActiveBiddingId  uint64                                        `protobuf:"varint,4,opt,name=active_bidding_id,json=activeBiddingId,proto3" json:"active_bidding_id,omitempty" yaml:"active_bidding_id"`
	Bidder           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"bidder"`
	Bid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,6,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	EndTime          time.Time                                     `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	BidFactor        github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,8,opt,name=bid_factor,json=bidFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bid_factor" yaml:"bid_factor"`
	BiddingIds       []*BidOwnerMapping                            `protobuf:"bytes,9,rep,name=bidding_ids,json=biddingIds,proto3" json:"bidding_ids,omitempty" yaml:"bidding_ids"`
	AuctionStatus    uint64                                        `protobuf:"varint,10,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	AppId            uint64                                        `protobuf:"varint,11,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId          uint64                                        `protobuf:"varint,12,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AuctionMappingId uint64                                        `protobuf:"varint,13,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AssetInId        uint64                                        `protobuf:"varint,14,opt,name=asset_in_id,json=assetInId,proto3" json:"asset_in_id,omitempty" yaml:"asset_in_id"`
	AssetOutId       uint64                                        `protobuf:"varint,15,opt,name=asset_out_id,json=assetOutId,proto3" json:"asset_out_id,omitempty" yaml:"asset_out_id"`
}

func (m *SurplusAuction) Reset()         { *m = SurplusAuction{} }
func (m *SurplusAuction) String() string { return proto.CompactTextString(m) }
func (*SurplusAuction) ProtoMessage()    {}
func (*SurplusAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{0}
}
func (m *SurplusAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SurplusAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SurplusAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SurplusAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurplusAuction.Merge(m, src)
}
func (m *SurplusAuction) XXX_Size() int {
	return m.Size()
}
func (m *SurplusAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_SurplusAuction.DiscardUnknown(m)
}

var xxx_messageInfo_SurplusAuction proto.InternalMessageInfo

type DebtAuction struct {
	AuctionId           uint64                                        `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	AuctionedToken      github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,2,opt,name=auctioned_token,json=auctionedToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"auctioned_token" yaml:"auctioned_token"`
	ExpectedUserToken   github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=expected_user_token,json=expectedUserToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"expected_user_token" yaml:"expected_user_token"`
	ExpectedMintedToken github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=expected_minted_token,json=expectedMintedToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"expected_minted_token" yaml:"expected_minted_token"`
	EndTime             time.Time                                     `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	ActiveBiddingId     uint64                                        `protobuf:"varint,6,opt,name=active_bidding_id,json=activeBiddingId,proto3" json:"active_bidding_id,omitempty" yaml:"active_bidding_id"`
	Bidder              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"bidder"`
	CurrentBidAmount    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,8,opt,name=current_bid_amount,json=currentBidAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"current_bid_amount" yaml:"current_bid_amount"`
	AuctionStatus       uint64                                        `protobuf:"varint,9,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	AppId               uint64                                        `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId             uint64                                        `protobuf:"varint,11,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	BiddingIds          []*BidOwnerMapping                            `protobuf:"bytes,12,rep,name=bidding_ids,json=biddingIds,proto3" json:"bidding_ids,omitempty" yaml:"bidding_ids"`
	AuctionMappingId    uint64                                        `protobuf:"varint,13,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	BidFactor           github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,14,opt,name=bid_factor,json=bidFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bid_factor" yaml:"bid_factor"`
	AssetInId           uint64                                        `protobuf:"varint,15,opt,name=asset_in_id,json=assetInId,proto3" json:"asset_in_id,omitempty" yaml:"asset_in_id"`
	AssetOutId          uint64                                        `protobuf:"varint,16,opt,name=asset_out_id,json=assetOutId,proto3" json:"asset_out_id,omitempty" yaml:"asset_out_id"`
}

func (m *DebtAuction) Reset()         { *m = DebtAuction{} }
func (m *DebtAuction) String() string { return proto.CompactTextString(m) }
func (*DebtAuction) ProtoMessage()    {}
func (*DebtAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{1}
}
func (m *DebtAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtAuction.Merge(m, src)
}
func (m *DebtAuction) XXX_Size() int {
	return m.Size()
}
func (m *DebtAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtAuction.DiscardUnknown(m)
}

var xxx_messageInfo_DebtAuction proto.InternalMessageInfo

type DutchAuction struct {
	AuctionId                 uint64                                        `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	OutflowTokenInitAmount    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,2,opt,name=outflow_token_init_amount,json=outflowTokenInitAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_init_amount" yaml:"outflow_token_init_amount"`
	OutflowTokenCurrentAmount github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=outflow_token_current_amount,json=outflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_current_amount" yaml:"outflow_token_current_amount"`
	InflowTokenTargetAmount   github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=inflow_token_target_amount,json=inflowTokenTargetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_target_amount" yaml:"inflow_token_target_amount"`
	InflowTokenCurrentAmount  github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,5,opt,name=inflow_token_current_amount,json=inflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_current_amount" yaml:"inflow_token_current_amount"`
	OutflowTokenInitialPrice  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,6,opt,name=outflow_token_initial_price,json=outflowTokenInitialPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_initial_price" yaml:"outflow_token_initial_price"`
	OutflowTokenCurrentPrice  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,7,opt,name=outflow_token_current_price,json=outflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_current_price" yaml:"outflow_token_current_price"`
	OutflowTokenEndPrice      github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,8,opt,name=outflow_token_end_price,json=outflowTokenEndPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_end_price" yaml:"outflow_token_end_price"`
	InflowTokenCurrentPrice   github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,9,opt,name=inflow_token_current_price,json=inflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_token_current_price" yaml:"inflow_token_current_price"`
	EndTime                   time.Time                                     `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	AuctionStatus             uint64                                        `protobuf:"varint,11,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	StartTime                 time.Time                                     `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	BiddingIds                []*BidOwnerMapping                            `protobuf:"bytes,13,rep,name=bidding_ids,json=biddingIds,proto3" json:"bidding_ids,omitempty" yaml:"bidding_ids"`
	AuctionMappingId          uint64                                        `protobuf:"varint,14,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AppId                     uint64                                        `protobuf:"varint,15,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetInId                 uint64                                        `protobuf:"varint,16,opt,name=asset_in_id,json=assetInId,proto3" json:"asset_in_id,omitempty" yaml:"asset_in_id"`
	AssetOutId                uint64                                        `protobuf:"varint,17,opt,name=asset_out_id,json=assetOutId,proto3" json:"asset_out_id,omitempty" yaml:"asset_out_id"`
	LockedVaultId             uint64                                        `protobuf:"varint,18,opt,name=locked_vault_id,json=lockedVaultId,proto3" json:"locked_vault_id,omitempty" yaml:"locked_vault_id"`
	VaultOwner                github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,19,opt,name=vault_owner,json=vaultOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"vault_owner,omitempty" yaml:"vault_owner"`
	LiquidationPenalty        github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,20,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty" yaml:"liquidatin_penalty"`
	IsLockedVaultAmountInZero bool                                          `protobuf:"varint,21,opt,name=is_locked_vault_amount_in_zero,json=isLockedVaultAmountInZero,proto3" json:"is_locked_vault_amount_in_zero,omitempty" yaml:"is_locked_vault_amount_in_zero"`
}

func (m *DutchAuction) Reset()         { *m = DutchAuction{} }
func (m *DutchAuction) String() string { return proto.CompactTextString(m) }
func (*DutchAuction) ProtoMessage()    {}
func (*DutchAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{2}
}
func (m *DutchAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutchAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutchAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutchAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutchAuction.Merge(m, src)
}
func (m *DutchAuction) XXX_Size() int {
	return m.Size()
}
func (m *DutchAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_DutchAuction.DiscardUnknown(m)
}

var xxx_messageInfo_DutchAuction proto.InternalMessageInfo

type BidOwnerMapping struct {
	BidId    uint64 `protobuf:"varint,1,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	BidOwner string `protobuf:"bytes,2,opt,name=bid_owner,json=bidOwner,proto3" json:"bid_owner,omitempty"`
}

func (m *BidOwnerMapping) Reset()         { *m = BidOwnerMapping{} }
func (m *BidOwnerMapping) String() string { return proto.CompactTextString(m) }
func (*BidOwnerMapping) ProtoMessage()    {}
func (*BidOwnerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{3}
}
func (m *BidOwnerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidOwnerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidOwnerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidOwnerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidOwnerMapping.Merge(m, src)
}
func (m *BidOwnerMapping) XXX_Size() int {
	return m.Size()
}
func (m *BidOwnerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_BidOwnerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_BidOwnerMapping proto.InternalMessageInfo

type ProtocolStatistics struct {
	AppId   uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Loss    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=loss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"loss" yaml:"loss"`
}

func (m *ProtocolStatistics) Reset()         { *m = ProtocolStatistics{} }
func (m *ProtocolStatistics) String() string { return proto.CompactTextString(m) }
func (*ProtocolStatistics) ProtoMessage()    {}
func (*ProtocolStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{4}
}
func (m *ProtocolStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolStatistics.Merge(m, src)
}
func (m *ProtocolStatistics) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolStatistics proto.InternalMessageInfo

type AuctionParams struct {
	AppId                  uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AuctionDurationSeconds uint64                                 `protobuf:"varint,2,opt,name=auction_duration_seconds,json=auctionDurationSeconds,proto3" json:"auction_duration_seconds,omitempty" yaml:"auction_duration_seconds"`
	Buffer                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=buffer,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"buffer" yaml:"buffer"`
	Cusp                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=cusp,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cusp" yaml:"cusp"`
	Step                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=step,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"step" yaml:"step"`
	PriceFunctionType      uint64                                 `protobuf:"varint,6,opt,name=price_function_type,json=priceFunctionType,proto3" json:"price_function_type,omitempty" yaml:"price_function_type"`
	SurplusId              uint64                                 `protobuf:"varint,7,opt,name=surplus_id,json=surplusId,proto3" json:"surplus_id,omitempty" yaml:"surplus_id"`
	DebtId                 uint64                                 `protobuf:"varint,8,opt,name=debt_id,json=debtId,proto3" json:"debt_id,omitempty" yaml:"debt_id"`
	DutchId                uint64                                 `protobuf:"varint,9,opt,name=dutch_id,json=dutchId,proto3" json:"dutch_id,omitempty" yaml:"dutch_id"`
}

func (m *AuctionParams) Reset()         { *m = AuctionParams{} }
func (m *AuctionParams) String() string { return proto.CompactTextString(m) }
func (*AuctionParams) ProtoMessage()    {}
func (*AuctionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{5}
}
func (m *AuctionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionParams.Merge(m, src)
}
func (m *AuctionParams) XXX_Size() int {
	return m.Size()
}
func (m *AuctionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionParams.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SurplusAuction)(nil), "comdex.auction.v1beta1.SurplusAuction")
	proto.RegisterType((*DebtAuction)(nil), "comdex.auction.v1beta1.DebtAuction")
	proto.RegisterType((*DutchAuction)(nil), "comdex.auction.v1beta1.DutchAuction")
	proto.RegisterType((*BidOwnerMapping)(nil), "comdex.auction.v1beta1.bidOwnerMapping")
	proto.RegisterType((*ProtocolStatistics)(nil), "comdex.auction.v1beta1.ProtocolStatistics")
	proto.RegisterType((*AuctionParams)(nil), "comdex.auction.v1beta1.AuctionParams")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/auction.proto", fileDescriptor_4bb9aead25d5fe6c)
}

var fileDescriptor_4bb9aead25d5fe6c = []byte{
	// 1681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcb, 0x6f, 0xdb, 0x46,
	0x1a, 0x37, 0x13, 0xdb, 0xb2, 0x46, 0xb6, 0x65, 0x8f, 0x5f, 0xb2, 0x9d, 0x88, 0xce, 0x64, 0x77,
	0xe3, 0xc5, 0x22, 0x12, 0x92, 0x5d, 0x2c, 0xb0, 0x0b, 0x2c, 0xb6, 0x56, 0x9c, 0xa4, 0x42, 0x92,
	0xc6, 0xa5, 0x9d, 0xb4, 0x08, 0x50, 0xa8, 0x24, 0x67, 0xa4, 0x4c, 0x23, 0x91, 0x2c, 0x1f, 0x49,
	0x5c, 0xf4, 0x58, 0x20, 0xa7, 0x02, 0x01, 0x8a, 0x02, 0x3d, 0xf5, 0x56, 0xa0, 0x05, 0x0a, 0x14,
	0xe8, 0x7f, 0x50, 0xf4, 0x92, 0x63, 0x8e, 0x45, 0x0f, 0x4a, 0xeb, 0xfc, 0x07, 0x3a, 0xe6, 0x54,
	0xcc, 0x83, 0xe2, 0xc3, 0x6a, 0x24, 0xda, 0x6e, 0x4f, 0x26, 0xe7, 0x9b, 0xef, 0xf7, 0xfd, 0xf8,
	0xcd, 0xf7, 0x1a, 0x19, 0xfc, 0xc5, 0xb4, 0x3b, 0x98, 0x3c, 0xae, 0xea, 0x81, 0xe9, 0x53, 0xdb,
	0xaa, 0x3e, 0xbc, 0x64, 0x10, 0x5f, 0xbf, 0x14, 0xbe, 0x57, 0x1c, 0xd7, 0xf6, 0x6d, 0xb8, 0x2c,
	0x76, 0x55, 0xc2, 0x55, 0xb9, 0x6b, 0x6d, 0xb1, 0x65, 0xb7, 0x6c, 0xbe, 0xa5, 0xca, 0x9e, 0xc4,
	0xee, 0x35, 0xb5, 0x65, 0xdb, 0xad, 0x36, 0xa9, 0xf2, 0x37, 0x23, 0x68, 0x56, 0x7d, 0xda, 0x21,
	0x9e, 0xaf, 0x77, 0x1c, 0xb9, 0xa1, 0x6c, 0xda, 0x5e, 0xc7, 0xf6, 0xaa, 0x86, 0xee, 0x91, 0xbe,
	0x45, 0xd3, 0xa6, 0xd2, 0x1c, 0x7a, 0x91, 0x07, 0xb3, 0xbb, 0x81, 0xeb, 0xb4, 0x03, 0x6f, 0x4b,
	0x58, 0x84, 0xff, 0x02, 0x40, 0x1a, 0x6f, 0x50, 0x5c, 0x52, 0x36, 0x94, 0xcd, 0xf1, 0xda, 0x52,
	0xaf, 0xab, 0xce, 0xef, 0xeb, 0x9d, 0xf6, 0x7f, 0x51, 0x24, 0x43, 0x5a, 0x5e, 0xbe, 0xd4, 0x31,
	0x7c, 0xa2, 0x80, 0x19, 0x3b, 0xf0, 0x9b, 0x6d, 0xfb, 0x51, 0xc3, 0xb7, 0x1f, 0x10, 0xab, 0x74,
	0x6a, 0x43, 0xd9, 0x2c, 0x5c, 0x5e, 0xad, 0x08, 0x06, 0x15, 0xc6, 0x20, 0xfc, 0x9a, 0xca, 0x15,
	0x9b, 0x5a, 0xb5, 0xeb, 0xcf, 0xba, 0xea, 0x58, 0xaf, 0xab, 0x2e, 0x0a, 0xe0, 0x84, 0x36, 0x7a,
	0xd5, 0x55, 0x2f, 0xb4, 0xa8, 0x7f, 0x3f, 0x30, 0x2a, 0xa6, 0xdd, 0xa9, 0xca, 0xcf, 0x10, 0x7f,
	0x2e, 0x7a, 0xf8, 0x41, 0xd5, 0xdf, 0x77, 0x88, 0xc7, 0x81, 0xb4, 0x69, 0xa9, 0xba, 0xc7, 0x34,
	0xe1, 0x27, 0x0a, 0x98, 0xa6, 0x56, 0x8c, 0xc8, 0xe9, 0x61, 0x44, 0xae, 0x49, 0x22, 0x0b, 0x82,
	0x48, 0x5c, 0x39, 0x13, 0x8f, 0x82, 0xd0, 0x14, 0x34, 0xde, 0x04, 0xf3, 0xba, 0xe9, 0xd3, 0x87,
	0xa4, 0x61, 0x50, 0x8c, 0xa9, 0xd5, 0x62, 0xde, 0x1c, 0xe7, 0xde, 0x3c, 0xd3, 0xeb, 0xaa, 0x25,
	0xe9, 0xcd, 0xf4, 0x16, 0xa4, 0x15, 0xc5, 0x5a, 0x4d, 0x2c, 0xd5, 0x31, 0xbc, 0x07, 0x26, 0x99,
	0x9c, 0xb8, 0xa5, 0x89, 0x0d, 0x65, 0x33, 0x5f, 0xab, 0xf5, 0xba, 0xea, 0x8c, 0x50, 0x17, 0xeb,
	0x8c, 0xe4, 0xc5, 0x11, 0x48, 0x6e, 0x99, 0xe6, 0x16, 0xc6, 0x2e, 0xf1, 0x3c, 0x4d, 0x22, 0xc2,
	0x0f, 0xc0, 0x69, 0x83, 0xe2, 0xd2, 0xe4, 0x30, 0x17, 0xfd, 0x4f, 0xba, 0x08, 0xf4, 0xed, 0x66,
	0xf2, 0x0c, 0x33, 0x02, 0x35, 0x30, 0x45, 0x2c, 0xdc, 0x60, 0x21, 0x5a, 0xca, 0x71, 0x83, 0x6b,
	0x15, 0x11, 0xbf, 0x95, 0x30, 0x7e, 0x2b, 0x7b, 0x61, 0xfc, 0xd6, 0xd6, 0xa5, 0xc5, 0xa2, 0xb0,
	0x18, 0x6a, 0xa2, 0xa7, 0x2f, 0x54, 0x45, 0xcb, 0x11, 0x0b, 0xb3, 0xad, 0xd0, 0x00, 0xc0, 0xa0,
	0xb8, 0xd1, 0xd4, 0x4d, 0xdf, 0x76, 0x4b, 0x53, 0xdc, 0x3f, 0x57, 0x98, 0xe6, 0xcf, 0x5d, 0xf5,
	0x6f, 0x23, 0xb0, 0xdb, 0x26, 0x66, 0x14, 0xda, 0x11, 0x12, 0xd2, 0xf2, 0x06, 0xc5, 0xd7, 0xf8,
	0x33, 0x7c, 0x1f, 0x14, 0xa2, 0xf3, 0xf1, 0x4a, 0xf9, 0x8d, 0xd3, 0x9b, 0x85, 0xcb, 0x17, 0x2a,
	0x83, 0x13, 0xb5, 0x62, 0x50, 0x7c, 0xfb, 0x91, 0x45, 0xdc, 0x5b, 0xba, 0xe3, 0x50, 0xab, 0x55,
	0x5b, 0xee, 0x75, 0x55, 0x18, 0x9d, 0x96, 0x44, 0x41, 0x1a, 0x30, 0xc2, 0x03, 0xf6, 0xe0, 0x1b,
	0x60, 0x36, 0x4c, 0x2b, 0xcf, 0xd7, 0xfd, 0xc0, 0x2b, 0x01, 0x1e, 0x28, 0xab, 0xbd, 0xae, 0xba,
	0x94, 0x4c, 0x3b, 0x21, 0x47, 0xda, 0x8c, 0x5c, 0xd8, 0xe5, 0xef, 0x70, 0x13, 0x4c, 0xea, 0x8e,
	0xc3, 0x42, 0xac, 0xc0, 0x35, 0xe7, 0xa3, 0x18, 0x11, 0xeb, 0x48, 0x9b, 0xd0, 0x1d, 0xa7, 0x8e,
	0x61, 0x05, 0x4c, 0xe9, 0x9e, 0x47, 0x7c, 0xb6, 0x77, 0x9a, 0xef, 0x5d, 0x88, 0xbc, 0x1c, 0x4a,
	0x90, 0x96, 0xe3, 0x8f, 0x75, 0x0c, 0x6f, 0x00, 0x18, 0xda, 0xee, 0x88, 0x4f, 0x62, 0x9a, 0x33,
	0x5c, 0xf3, 0x6c, 0xaf, 0xab, 0xae, 0x26, 0xf9, 0x45, 0x7b, 0x90, 0x36, 0x27, 0x17, 0xa5, 0x2b,
	0xea, 0x18, 0xfe, 0x1b, 0x14, 0xa4, 0x09, 0x5e, 0x5c, 0x66, 0x39, 0x4a, 0xcc, 0x43, 0x31, 0x21,
	0xab, 0x2e, 0x9c, 0x02, 0xab, 0x2e, 0xff, 0x01, 0xd3, 0x42, 0x64, 0x07, 0x9c, 0x78, 0x91, 0x2b,
	0xae, 0x44, 0x39, 0x1b, 0x97, 0x22, 0x0d, 0xf0, 0xd7, 0xdb, 0x81, 0x5f, 0xc7, 0xe8, 0xc7, 0x02,
	0x28, 0x6c, 0x13, 0xc3, 0x3f, 0x5e, 0x79, 0xfb, 0x54, 0x01, 0x45, 0xf9, 0x46, 0xf0, 0xa8, 0x05,
	0xae, 0x2e, 0x43, 0x78, 0x39, 0x01, 0x1d, 0xea, 0x67, 0x4a, 0xa0, 0xd9, 0xbe, 0xb2, 0xa8, 0x2e,
	0x5f, 0x28, 0x60, 0x81, 0x3c, 0x76, 0x88, 0xe9, 0x13, 0xdc, 0x08, 0x3c, 0xe2, 0x8e, 0x5a, 0xeb,
	0x6e, 0x49, 0x4e, 0x6b, 0x32, 0xad, 0x0e, 0x63, 0x64, 0xe2, 0x35, 0x1f, 0x02, 0xdc, 0xf1, 0x88,
	0x2b, 0xa8, 0x7d, 0xa9, 0x80, 0xa5, 0x3e, 0x6c, 0x87, 0x5a, 0x7e, 0xdf, 0x61, 0xe3, 0xc3, 0xc8,
	0xdd, 0x96, 0xe4, 0xce, 0xa4, 0xc8, 0xc5, 0x51, 0x32, 0xd1, 0xeb, 0xfb, 0xe8, 0x16, 0x47, 0x10,
	0x04, 0xe3, 0x75, 0x68, 0xe2, 0x84, 0xea, 0xd0, 0xc0, 0x6a, 0x3f, 0x79, 0xbc, 0x6a, 0x9f, 0x3b,
	0xf1, 0x6a, 0xff, 0xb9, 0x02, 0xa0, 0x19, 0xb8, 0x2e, 0xb1, 0x7c, 0x46, 0xa2, 0xa1, 0x77, 0xec,
	0xc0, 0xf2, 0x79, 0xd9, 0x7c, 0xed, 0xb9, 0xdc, 0x94, 0x3e, 0x90, 0xb9, 0x7e, 0x18, 0x22, 0xd3,
	0xa1, 0xcc, 0x49, 0xfd, 0x1a, 0xc5, 0x5b, 0x5c, 0x7b, 0x40, 0xfd, 0xcb, 0x1f, 0xb9, 0xfe, 0x81,
	0x0c, 0xf5, 0xaf, 0x30, 0x42, 0xfd, 0x4b, 0x55, 0xff, 0xe9, 0x93, 0xaf, 0xfe, 0x27, 0x5a, 0x61,
	0x93, 0x0d, 0x71, 0xf6, 0x0f, 0x69, 0x88, 0xa9, 0x2a, 0x5e, 0x3c, 0x6a, 0x15, 0x9f, 0x1b, 0xbd,
	0x8a, 0x7f, 0x05, 0xc1, 0xf4, 0x76, 0xe0, 0x9b, 0xf7, 0x8f, 0x57, 0xc6, 0xbf, 0x51, 0xc0, 0x6a,
	0x62, 0xce, 0x6c, 0x50, 0x8b, 0xfa, 0x61, 0x1e, 0x0c, 0x2d, 0xe8, 0xbb, 0x32, 0x0f, 0x36, 0x06,
	0x4c, 0xac, 0x71, 0xa4, 0x4c, 0xe9, 0xb0, 0x1c, 0x9f, 0x5e, 0xeb, 0x16, 0xf5, 0x65, 0x52, 0x7c,
	0xaf, 0x80, 0x33, 0x49, 0x0b, 0x61, 0xde, 0x49, 0xba, 0x43, 0x6b, 0xfd, 0x5d, 0x49, 0xf7, 0xfc,
	0x20, 0xba, 0x49, 0xb0, 0x4c, 0x8c, 0x57, 0xe3, 0x8c, 0xaf, 0x08, 0x1c, 0x49, 0xfa, 0x5b, 0x05,
	0xac, 0xc5, 0xe7, 0xe7, 0x86, 0xaf, 0xbb, 0x2d, 0xd2, 0xa7, 0x3c, 0xb4, 0x03, 0xec, 0x49, 0xca,
	0xe7, 0x0e, 0x8f, 0xe2, 0x49, 0xa8, 0x4c, 0x84, 0x57, 0x62, 0x83, 0xf9, 0x1e, 0x47, 0x91, 0x74,
	0xbf, 0x53, 0xc0, 0x7a, 0xc2, 0x46, 0xca, 0xc5, 0x13, 0xc3, 0xf8, 0xde, 0x91, 0x7c, 0xd1, 0x00,
	0xbe, 0xc7, 0xf0, 0x70, 0x29, 0x46, 0x38, 0xe9, 0xe0, 0xcf, 0x14, 0xb0, 0x7e, 0x38, 0xee, 0xa8,
	0xde, 0x6e, 0x38, 0x2e, 0x35, 0x09, 0xef, 0x39, 0x79, 0xe1, 0xc6, 0x4c, 0x19, 0x8f, 0x7e, 0x2f,
	0xa4, 0xfb, 0xd0, 0x48, 0x2b, 0xa5, 0x23, 0x95, 0xea, 0xed, 0x1d, 0x26, 0x1a, 0xc0, 0x2a, 0xfc,
	0x78, 0xc1, 0x2a, 0x77, 0x92, 0xac, 0x12, 0xd0, 0x29, 0x56, 0xd2, 0x59, 0x82, 0xd5, 0x13, 0x05,
	0xac, 0x24, 0x55, 0x59, 0xf7, 0x16, 0x8c, 0xc4, 0x55, 0x61, 0x27, 0x33, 0xa3, 0xf2, 0x20, 0x46,
	0x7d, 0x58, 0xa4, 0x2d, 0xc6, 0xd9, 0x5c, 0xb5, 0xb0, 0x60, 0xf2, 0x34, 0x9d, 0x16, 0x49, 0xf7,
	0xe4, 0x39, 0x99, 0xdd, 0xcc, 0x64, 0xce, 0xbd, 0x26, 0xea, 0x24, 0x9f, 0x95, 0xc3, 0x91, 0x24,
	0x28, 0xc5, 0xa7, 0x20, 0x70, 0x42, 0x53, 0xd0, 0xe1, 0x3e, 0x5e, 0xc8, 0xd8, 0xc7, 0xdf, 0x05,
	0xc0, 0xf3, 0x75, 0xd7, 0x17, 0xbc, 0xa6, 0x87, 0xf2, 0x3a, 0x2b, 0x79, 0xc9, 0xb2, 0x1f, 0xe9,
	0x0a, 0x66, 0x79, 0xbe, 0xc0, 0xb9, 0xa5, 0xfa, 0xf8, 0xcc, 0x9f, 0xd5, 0xc7, 0x67, 0x8f, 0xd6,
	0xc7, 0xa3, 0x81, 0xa6, 0x38, 0x64, 0xa0, 0x49, 0x75, 0xe3, 0xb9, 0xa3, 0x76, 0xe3, 0xf9, 0x91,
	0xbb, 0x31, 0xac, 0x81, 0x62, 0xdb, 0x36, 0x1f, 0x10, 0xdc, 0x78, 0xa8, 0x07, 0x6d, 0xae, 0x0d,
	0xb9, 0xf6, 0x5a, 0x74, 0xdb, 0x49, 0x6d, 0x40, 0xda, 0x8c, 0x58, 0xb9, 0xcb, 0x16, 0xea, 0x18,
	0xde, 0x07, 0x05, 0x21, 0xb3, 0x99, 0x9f, 0x4b, 0x0b, 0x3c, 0x05, 0xae, 0x47, 0xb4, 0x63, 0xc2,
	0x23, 0x4c, 0xbc, 0x80, 0xab, 0xf3, 0x23, 0x84, 0x1f, 0x83, 0x85, 0x36, 0xfd, 0x30, 0xa0, 0x58,
	0xe7, 0x7e, 0x77, 0x88, 0xa5, 0xb7, 0xfd, 0xfd, 0xd2, 0x22, 0xb7, 0x78, 0x23, 0x73, 0xd2, 0xc9,
	0x63, 0xec, 0x43, 0xf6, 0x11, 0x91, 0x06, 0x63, 0x76, 0x76, 0xc4, 0x22, 0x6c, 0x83, 0x32, 0xf5,
	0x1a, 0x09, 0x6f, 0x88, 0x86, 0xc0, 0x8e, 0xe4, 0x23, 0xe2, 0xda, 0xa5, 0xa5, 0x0d, 0x65, 0x73,
	0xaa, 0xf6, 0xf7, 0x5e, 0x57, 0xfd, 0xab, 0xcc, 0xe7, 0xd7, 0xee, 0x47, 0xda, 0x2a, 0xf5, 0x6e,
	0x46, 0xbe, 0x14, 0x8d, 0xa1, 0x6e, 0xdd, 0x63, 0xb2, 0xab, 0xa0, 0x98, 0x0a, 0x5d, 0xb8, 0xc4,
	0x2f, 0x14, 0xfd, 0x29, 0x49, 0x9b, 0x30, 0x28, 0xae, 0x63, 0xb8, 0x0e, 0xd8, 0x44, 0x27, 0xbd,
	0xcf, 0x26, 0x9f, 0xbc, 0x36, 0x15, 0xaa, 0xa2, 0x1f, 0x14, 0x00, 0x77, 0x58, 0xb6, 0x99, 0x76,
	0x9b, 0x65, 0x26, 0xf5, 0x7c, 0x6a, 0xc6, 0xa7, 0x6c, 0x25, 0xc3, 0x94, 0x7d, 0x6a, 0x84, 0x29,
	0xfb, 0x6d, 0x30, 0xde, 0xb6, 0x3d, 0x8f, 0xcf, 0x34, 0x79, 0xf1, 0x6b, 0x53, 0xa6, 0x43, 0x29,
	0x84, 0x41, 0xe7, 0x79, 0x48, 0xe3, 0x50, 0xe8, 0xd5, 0x38, 0x98, 0x91, 0xd3, 0xe2, 0x8e, 0xee,
	0xea, 0x9d, 0x2c, 0xf4, 0xdf, 0x03, 0xa5, 0x30, 0x4d, 0x71, 0xe0, 0x8a, 0xb8, 0xf1, 0x88, 0x69,
	0x5b, 0xd8, 0x93, 0x9f, 0x73, 0xbe, 0xd7, 0x55, 0xd5, 0x64, 0x42, 0xa7, 0x77, 0x22, 0x6d, 0x59,
	0x8a, 0xb6, 0xa5, 0x64, 0x57, 0x08, 0xe0, 0x3b, 0x60, 0xd2, 0x08, 0x9a, 0x4d, 0xe2, 0xca, 0xef,
	0xfd, 0x7f, 0xe6, 0xef, 0x0d, 0x6f, 0x84, 0x1c, 0x05, 0x69, 0x12, 0x8e, 0xb9, 0xd1, 0x0c, 0x3c,
	0x87, 0xcf, 0x59, 0xc7, 0x70, 0x23, 0xc3, 0x40, 0x1a, 0x87, 0x62, 0x90, 0x9e, 0x4f, 0x1c, 0xf9,
	0xdb, 0x63, 0x16, 0xc8, 0xba, 0xe5, 0x47, 0x90, 0x0c, 0x03, 0x69, 0x1c, 0x0a, 0xbe, 0x05, 0x16,
	0x78, 0x77, 0x6a, 0x34, 0x03, 0x4b, 0xb8, 0x8e, 0x29, 0xc8, 0xeb, 0x72, 0x39, 0xfa, 0x71, 0x62,
	0xc0, 0x26, 0xa4, 0xcd, 0xf3, 0xd5, 0x6b, 0x72, 0x71, 0x6f, 0xdf, 0x21, 0xec, 0x2e, 0xe0, 0x89,
	0xdf, 0xb0, 0xd9, 0xd9, 0xe6, 0xd2, 0x77, 0x81, 0x48, 0x86, 0xb4, 0xbc, 0x7c, 0xa9, 0x63, 0xf8,
	0x0f, 0x90, 0xc3, 0xc4, 0xe0, 0x11, 0x3a, 0xc5, 0x55, 0x60, 0xaf, 0xab, 0xce, 0x0a, 0x15, 0x29,
	0x40, 0xda, 0x24, 0x7b, 0x12, 0xf1, 0x8c, 0xd9, 0xf5, 0x83, 0xed, 0xce, 0xa7, 0xe3, 0x39, 0x94,
	0x20, 0x2d, 0xc7, 0x1f, 0xeb, 0xb8, 0xb6, 0xfb, 0xec, 0xd7, 0xf2, 0xd8, 0xd7, 0x07, 0xe5, 0xb1,
	0x67, 0x07, 0x65, 0xe5, 0xf9, 0x41, 0x59, 0xf9, 0xe5, 0xa0, 0xac, 0x3c, 0x7d, 0x59, 0x1e, 0x7b,
	0xfe, 0xb2, 0x3c, 0xf6, 0xd3, 0xcb, 0xf2, 0xd8, 0xbd, 0x4b, 0x09, 0x0f, 0xb2, 0x26, 0x74, 0xd1,
	0x6e, 0x36, 0xa9, 0x49, 0xf5, 0xb6, 0x7c, 0xaf, 0x46, 0xff, 0x2b, 0xe0, 0x0e, 0x35, 0x26, 0x79,
	0x03, 0xfc, 0xe7, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xeb, 0xb9, 0x98, 0x4a, 0x18, 0x00,
	0x00,
}

func (m *SurplusAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurplusAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SurplusAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetOutId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetOutId))
		i--
		dAtA[i] = 0x78
	}
	if m.AssetInId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetInId))
		i--
		dAtA[i] = 0x70
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x68
	}
	if m.AssetId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x60
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x58
	}
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BiddingIds) > 0 {
		for iNdEx := len(m.BiddingIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BiddingIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.BidFactor.Size()
		i -= size
		if _, err := m.BidFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAuction(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActiveBiddingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ActiveBiddingId))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.InflowToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutflowToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebtAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebtAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetOutId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetOutId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AssetInId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetInId))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.BidFactor.Size()
		i -= size
		if _, err := m.BidFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.AuctionMappingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.BiddingIds) > 0 {
		for iNdEx := len(m.BiddingIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BiddingIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.AssetId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x58
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x50
	}
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.CurrentBidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActiveBiddingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ActiveBiddingId))
		i--
		dAtA[i] = 0x30
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintAuction(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ExpectedMintedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ExpectedUserToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.AuctionedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DutchAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutchAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DutchAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLockedVaultAmountInZero {
		i--
		if m.IsLockedVaultAmountInZero {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.VaultOwner) > 0 {
		i -= len(m.VaultOwner)
		copy(dAtA[i:], m.VaultOwner)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.VaultOwner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.LockedVaultId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AssetOutId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetOutId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AssetInId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetInId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x78
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.BiddingIds) > 0 {
		for iNdEx := len(m.BiddingIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BiddingIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintAuction(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x62
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x58
	}
	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintAuction(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x52
	{
		size := m.InflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.InflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.OutflowTokenEndPrice.Size()
		i -= size
		if _, err := m.OutflowTokenEndPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.OutflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.OutflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OutflowTokenInitialPrice.Size()
		i -= size
		if _, err := m.OutflowTokenInitialPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.InflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.InflowTokenTargetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.OutflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutflowTokenInitAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BidOwnerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidOwnerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidOwnerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidOwner) > 0 {
		i -= len(m.BidOwner)
		copy(dAtA[i:], m.BidOwner)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.BidOwner)))
		i--
		dAtA[i] = 0x12
	}
	if m.BidId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Loss.Size()
		i -= size
		if _, err := m.Loss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuctionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DutchId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.DutchId))
		i--
		dAtA[i] = 0x48
	}
	if m.DebtId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.DebtId))
		i--
		dAtA[i] = 0x40
	}
	if m.SurplusId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.SurplusId))
		i--
		dAtA[i] = 0x38
	}
	if m.PriceFunctionType != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.PriceFunctionType))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Step.Size()
		i -= size
		if _, err := m.Step.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Cusp.Size()
		i -= size
		if _, err := m.Cusp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Buffer.Size()
		i -= size
		if _, err := m.Buffer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AuctionDurationSeconds != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionDurationSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SurplusAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.OutflowToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.ActiveBiddingId != 0 {
		n += 1 + sovAuction(uint64(m.ActiveBiddingId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.BidFactor.Size()
	n += 1 + l + sovAuction(uint64(l))
	if len(m.BiddingIds) > 0 {
		for _, e := range m.BiddingIds {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	if m.AuctionStatus != 0 {
		n += 1 + sovAuction(uint64(m.AuctionStatus))
	}
	if m.AppId != 0 {
		n += 1 + sovAuction(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovAuction(uint64(m.AssetId))
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionMappingId))
	}
	if m.AssetInId != 0 {
		n += 1 + sovAuction(uint64(m.AssetInId))
	}
	if m.AssetOutId != 0 {
		n += 1 + sovAuction(uint64(m.AssetOutId))
	}
	return n
}

func (m *DebtAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.AuctionedToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.ExpectedUserToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.ExpectedMintedToken.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.ActiveBiddingId != 0 {
		n += 1 + sovAuction(uint64(m.ActiveBiddingId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.CurrentBidAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.AuctionStatus != 0 {
		n += 1 + sovAuction(uint64(m.AuctionStatus))
	}
	if m.AppId != 0 {
		n += 1 + sovAuction(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovAuction(uint64(m.AssetId))
	}
	if len(m.BiddingIds) > 0 {
		for _, e := range m.BiddingIds {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionMappingId))
	}
	l = m.BidFactor.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.AssetInId != 0 {
		n += 1 + sovAuction(uint64(m.AssetInId))
	}
	if m.AssetOutId != 0 {
		n += 2 + sovAuction(uint64(m.AssetOutId))
	}
	return n
}

func (m *DutchAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.OutflowTokenInitAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenTargetAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenInitialPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenEndPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	if m.AuctionStatus != 0 {
		n += 1 + sovAuction(uint64(m.AuctionStatus))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	if len(m.BiddingIds) > 0 {
		for _, e := range m.BiddingIds {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	if m.AuctionMappingId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionMappingId))
	}
	if m.AppId != 0 {
		n += 1 + sovAuction(uint64(m.AppId))
	}
	if m.AssetInId != 0 {
		n += 2 + sovAuction(uint64(m.AssetInId))
	}
	if m.AssetOutId != 0 {
		n += 2 + sovAuction(uint64(m.AssetOutId))
	}
	if m.LockedVaultId != 0 {
		n += 2 + sovAuction(uint64(m.LockedVaultId))
	}
	l = len(m.VaultOwner)
	if l > 0 {
		n += 2 + l + sovAuction(uint64(l))
	}
	l = m.LiquidationPenalty.Size()
	n += 2 + l + sovAuction(uint64(l))
	if m.IsLockedVaultAmountInZero {
		n += 3
	}
	return n
}

func (m *BidOwnerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidId != 0 {
		n += 1 + sovAuction(uint64(m.BidId))
	}
	l = len(m.BidOwner)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func (m *ProtocolStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovAuction(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovAuction(uint64(m.AssetId))
	}
	l = m.Loss.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *AuctionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovAuction(uint64(m.AppId))
	}
	if m.AuctionDurationSeconds != 0 {
		n += 1 + sovAuction(uint64(m.AuctionDurationSeconds))
	}
	l = m.Buffer.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.Cusp.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.Step.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.PriceFunctionType != 0 {
		n += 1 + sovAuction(uint64(m.PriceFunctionType))
	}
	if m.SurplusId != 0 {
		n += 1 + sovAuction(uint64(m.SurplusId))
	}
	if m.DebtId != 0 {
		n += 1 + sovAuction(uint64(m.DebtId))
	}
	if m.DutchId != 0 {
		n += 1 + sovAuction(uint64(m.DutchId))
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SurplusAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurplusAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurplusAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBiddingId", wireType)
			}
			m.ActiveBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingIds = append(m.BiddingIds, &BidOwnerMapping{})
			if err := m.BiddingIds[len(m.BiddingIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInId", wireType)
			}
			m.AssetInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetInId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutId", wireType)
			}
			m.AssetOutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedUserToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedUserToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedMintedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedMintedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBiddingId", wireType)
			}
			m.ActiveBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingIds = append(m.BiddingIds, &BidOwnerMapping{})
			if err := m.BiddingIds[len(m.BiddingIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInId", wireType)
			}
			m.AssetInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetInId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutId", wireType)
			}
			m.AssetOutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutchAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutchAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutchAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenTargetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitialPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitialPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenEndPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenEndPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingIds = append(m.BiddingIds, &BidOwnerMapping{})
			if err := m.BiddingIds[len(m.BiddingIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInId", wireType)
			}
			m.AssetInId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetInId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutId", wireType)
			}
			m.AssetOutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultOwner = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLockedVaultAmountInZero", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLockedVaultAmountInZero = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidOwnerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bidOwnerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bidOwnerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Loss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDurationSeconds", wireType)
			}
			m.AuctionDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cusp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cusp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFunctionType", wireType)
			}
			m.PriceFunctionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceFunctionType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurplusId", wireType)
			}
			m.SurplusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurplusId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtId", wireType)
			}
			m.DebtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutchId", wireType)
			}
			m.DutchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DutchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
