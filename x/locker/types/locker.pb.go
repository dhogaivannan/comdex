// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/locker/v1beta1/locker.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//locker_id will be the key which will be derived from the LockerLookUpTable
type Locker struct {
	LockerId           string                                 `protobuf:"bytes,1,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	Depositor          string                                 `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	ReturnsAccumulated github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=returns_accumulated,json=returnsAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"returns_accumulated" yaml:"returns_accumulated"`
	NetBalance         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=net_balance,json=netBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"net_balance" yaml:"net_balance"`
	CreatedAt          time.Time                              `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
	AssetDepositId     uint64                                 `protobuf:"varint,6,opt,name=asset_deposit_id,json=assetDepositId,proto3" json:"asset_deposit_id,omitempty" yaml:"asset_deposit_id"`
	IsLocked           bool                                   `protobuf:"varint,7,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty" yaml:"is_locked"`
	AppMappingId       uint64                                 `protobuf:"varint,8,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
}

func (m *Locker) Reset()         { *m = Locker{} }
func (m *Locker) String() string { return proto.CompactTextString(m) }
func (*Locker) ProtoMessage()    {}
func (*Locker) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{0}
}
func (m *Locker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locker.Merge(m, src)
}
func (m *Locker) XXX_Size() int {
	return m.Size()
}
func (m *Locker) XXX_DiscardUnknown() {
	xxx_messageInfo_Locker.DiscardUnknown(m)
}

var xxx_messageInfo_Locker proto.InternalMessageInfo

//Key is user address
type UserLockerAssetMapping struct {
	Owner            string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	LockerAppMapping []*LockerToAppMapping `protobuf:"bytes,2,rep,name=locker_app_mapping,json=lockerAppMapping,proto3" json:"locker_app_mapping,omitempty" yaml:"locker_app_mapping"`
}

func (m *UserLockerAssetMapping) Reset()         { *m = UserLockerAssetMapping{} }
func (m *UserLockerAssetMapping) String() string { return proto.CompactTextString(m) }
func (*UserLockerAssetMapping) ProtoMessage()    {}
func (*UserLockerAssetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{1}
}
func (m *UserLockerAssetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLockerAssetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLockerAssetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLockerAssetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLockerAssetMapping.Merge(m, src)
}
func (m *UserLockerAssetMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserLockerAssetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLockerAssetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserLockerAssetMapping proto.InternalMessageInfo

//This is used inside the UserLockerAssetMapping
type LockerToAppMapping struct {
	AppMappingId    uint64                  `protobuf:"varint,1,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty"`
	UserAssetLocker []*AssetToLockerMapping `protobuf:"bytes,2,rep,name=user_asset_locker,json=userAssetLocker,proto3" json:"user_asset_locker,omitempty" yaml:"user_asset_locker"`
}

func (m *LockerToAppMapping) Reset()         { *m = LockerToAppMapping{} }
func (m *LockerToAppMapping) String() string { return proto.CompactTextString(m) }
func (*LockerToAppMapping) ProtoMessage()    {}
func (*LockerToAppMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{2}
}
func (m *LockerToAppMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerToAppMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerToAppMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerToAppMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerToAppMapping.Merge(m, src)
}
func (m *LockerToAppMapping) XXX_Size() int {
	return m.Size()
}
func (m *LockerToAppMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerToAppMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LockerToAppMapping proto.InternalMessageInfo

//This is used inside LockerToAppMapping
type AssetToLockerMapping struct {
	AssetId  uint64        `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	LockerId string        `protobuf:"bytes,2,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	UserData []*UserTxData `protobuf:"bytes,3,rep,name=user_data,json=userData,proto3" json:"user_data,omitempty" yaml:"user_data"`
}

func (m *AssetToLockerMapping) Reset()         { *m = AssetToLockerMapping{} }
func (m *AssetToLockerMapping) String() string { return proto.CompactTextString(m) }
func (*AssetToLockerMapping) ProtoMessage()    {}
func (*AssetToLockerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{3}
}
func (m *AssetToLockerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetToLockerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetToLockerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetToLockerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetToLockerMapping.Merge(m, src)
}
func (m *AssetToLockerMapping) XXX_Size() int {
	return m.Size()
}
func (m *AssetToLockerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetToLockerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AssetToLockerMapping proto.InternalMessageInfo

type UserTxData struct {
	TxType  string                                 `protobuf:"bytes,1,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty" yaml:"tx_type"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Balance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance" yaml:"balance"`
	TxTime  time.Time                              `protobuf:"bytes,4,opt,name=tx_time,json=txTime,proto3,stdtime" json:"tx_time" yaml:"tx_time"`
}

func (m *UserTxData) Reset()         { *m = UserTxData{} }
func (m *UserTxData) String() string { return proto.CompactTextString(m) }
func (*UserTxData) ProtoMessage()    {}
func (*UserTxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{4}
}
func (m *UserTxData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTxData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTxData.Merge(m, src)
}
func (m *UserTxData) XXX_Size() int {
	return m.Size()
}
func (m *UserTxData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTxData.DiscardUnknown(m)
}

var xxx_messageInfo_UserTxData proto.InternalMessageInfo

//Key is app_mapping_id
type LockerLookupTable struct {
	AppMappingId uint64                  `protobuf:"varint,1,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	Lockers      []*TokenToLockerMapping `protobuf:"bytes,2,rep,name=lockers,proto3" json:"lockers,omitempty" yaml:"lockers"`
	Counter      uint64                  `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *LockerLookupTable) Reset()         { *m = LockerLookupTable{} }
func (m *LockerLookupTable) String() string { return proto.CompactTextString(m) }
func (*LockerLookupTable) ProtoMessage()    {}
func (*LockerLookupTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{5}
}
func (m *LockerLookupTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerLookupTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerLookupTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerLookupTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerLookupTable.Merge(m, src)
}
func (m *LockerLookupTable) XXX_Size() int {
	return m.Size()
}
func (m *LockerLookupTable) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerLookupTable.DiscardUnknown(m)
}

var xxx_messageInfo_LockerLookupTable proto.InternalMessageInfo

type TokenToLockerMapping struct {
	AssetId         uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	LockerIds       []string                               `protobuf:"bytes,2,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"addresses"`
	DepositedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposited_amount" yaml:"deposited_amount"`
}

func (m *TokenToLockerMapping) Reset()         { *m = TokenToLockerMapping{} }
func (m *TokenToLockerMapping) String() string { return proto.CompactTextString(m) }
func (*TokenToLockerMapping) ProtoMessage()    {}
func (*TokenToLockerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{6}
}
func (m *TokenToLockerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenToLockerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenToLockerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenToLockerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenToLockerMapping.Merge(m, src)
}
func (m *TokenToLockerMapping) XXX_Size() int {
	return m.Size()
}
func (m *TokenToLockerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenToLockerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_TokenToLockerMapping proto.InternalMessageInfo

//Key is app_mapping_id
type LockerProductAssetMapping struct {
	AppMappingId uint64   `protobuf:"varint,1,opt,name=app_mapping_id,json=appMappingId,proto3" json:"app_mapping_id,omitempty" yaml:"app_mapping_id"`
	AssetIds     []uint64 `protobuf:"varint,2,rep,packed,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty" yaml:"asset_ids"`
}

func (m *LockerProductAssetMapping) Reset()         { *m = LockerProductAssetMapping{} }
func (m *LockerProductAssetMapping) String() string { return proto.CompactTextString(m) }
func (*LockerProductAssetMapping) ProtoMessage()    {}
func (*LockerProductAssetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{7}
}
func (m *LockerProductAssetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerProductAssetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerProductAssetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerProductAssetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerProductAssetMapping.Merge(m, src)
}
func (m *LockerProductAssetMapping) XXX_Size() int {
	return m.Size()
}
func (m *LockerProductAssetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerProductAssetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LockerProductAssetMapping proto.InternalMessageInfo

type LockedDepositedAmountDataMap struct {
	AssetId         uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	DepositedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposited_amount" yaml:"deposited_amount"`
}

func (m *LockedDepositedAmountDataMap) Reset()         { *m = LockedDepositedAmountDataMap{} }
func (m *LockedDepositedAmountDataMap) String() string { return proto.CompactTextString(m) }
func (*LockedDepositedAmountDataMap) ProtoMessage()    {}
func (*LockedDepositedAmountDataMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{8}
}
func (m *LockedDepositedAmountDataMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDepositedAmountDataMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDepositedAmountDataMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDepositedAmountDataMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDepositedAmountDataMap.Merge(m, src)
}
func (m *LockedDepositedAmountDataMap) XXX_Size() int {
	return m.Size()
}
func (m *LockedDepositedAmountDataMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDepositedAmountDataMap.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDepositedAmountDataMap proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Locker)(nil), "comdex.locker.v1beta1.Locker")
	proto.RegisterType((*UserLockerAssetMapping)(nil), "comdex.locker.v1beta1.UserLockerAssetMapping")
	proto.RegisterType((*LockerToAppMapping)(nil), "comdex.locker.v1beta1.LockerToAppMapping")
	proto.RegisterType((*AssetToLockerMapping)(nil), "comdex.locker.v1beta1.AssetToLockerMapping")
	proto.RegisterType((*UserTxData)(nil), "comdex.locker.v1beta1.UserTxData")
	proto.RegisterType((*LockerLookupTable)(nil), "comdex.locker.v1beta1.LockerLookupTable")
	proto.RegisterType((*TokenToLockerMapping)(nil), "comdex.locker.v1beta1.TokenToLockerMapping")
	proto.RegisterType((*LockerProductAssetMapping)(nil), "comdex.locker.v1beta1.LockerProductAssetMapping")
	proto.RegisterType((*LockedDepositedAmountDataMap)(nil), "comdex.locker.v1beta1.LockedDepositedAmountDataMap")
}

func init() {
	proto.RegisterFile("comdex/locker/v1beta1/locker.proto", fileDescriptor_5cf8d15809df39ec)
}

var fileDescriptor_5cf8d15809df39ec = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0x3a, 0xae, 0x3f, 0x26, 0x25, 0x71, 0xa6, 0x29, 0xdd, 0x98, 0xd6, 0x6b, 0x46, 0xa8,
	0x32, 0xaa, 0xba, 0x26, 0xe9, 0x8d, 0x4b, 0xb1, 0x15, 0x0e, 0x96, 0x52, 0x81, 0x46, 0x46, 0x40,
	0x2f, 0xd6, 0x78, 0x77, 0x62, 0x56, 0xf1, 0x7a, 0x56, 0xbb, 0xb3, 0x25, 0x39, 0xf0, 0x1b, 0xe8,
	0xcf, 0xe0, 0xca, 0x0d, 0x71, 0xe1, 0xc2, 0x21, 0xdc, 0x7a, 0x44, 0x08, 0x2d, 0x90, 0xdc, 0x38,
	0xee, 0x2f, 0x40, 0xf3, 0xb1, 0x6b, 0x6f, 0xe2, 0x06, 0x2c, 0xd4, 0x53, 0x76, 0xde, 0x8f, 0xe7,
	0x7d, 0xe7, 0x7d, 0x9e, 0x79, 0x1d, 0x80, 0x1c, 0xe6, 0xbb, 0xf4, 0xb4, 0x37, 0x63, 0xce, 0x09,
	0x0d, 0x7b, 0x2f, 0xf6, 0x27, 0x94, 0x93, 0x7d, 0x7d, 0xb4, 0x83, 0x90, 0x71, 0x06, 0xef, 0xaa,
	0x18, 0x5b, 0x1b, 0x75, 0x4c, 0x6b, 0x77, 0xca, 0xa6, 0x4c, 0x46, 0xf4, 0xc4, 0x97, 0x0a, 0x6e,
	0x59, 0x53, 0xc6, 0xa6, 0x33, 0xda, 0x93, 0xa7, 0x49, 0x7c, 0xdc, 0xe3, 0x9e, 0x4f, 0x23, 0x4e,
	0xfc, 0x40, 0x05, 0xa0, 0xbf, 0x2b, 0xa0, 0x7a, 0x24, 0x91, 0xe0, 0x3e, 0x68, 0x28, 0xcc, 0xb1,
	0xe7, 0x9a, 0x46, 0xc7, 0xe8, 0x36, 0x06, 0xbb, 0x69, 0x62, 0x35, 0xcf, 0x88, 0x3f, 0xfb, 0x10,
	0xe5, 0x2e, 0x84, 0xeb, 0xea, 0x7b, 0xe8, 0xc2, 0x03, 0xd0, 0x70, 0x69, 0xc0, 0x22, 0x8f, 0xb3,
	0xd0, 0x2c, 0x5f, 0x4d, 0xc9, 0x5d, 0x08, 0x2f, 0xc2, 0xe0, 0x37, 0xe0, 0x4e, 0x48, 0x79, 0x1c,
	0xce, 0xa3, 0x31, 0x71, 0x9c, 0xd8, 0x8f, 0x67, 0x84, 0x53, 0xd7, 0xdc, 0x90, 0xd9, 0x47, 0xe7,
	0x89, 0x55, 0xfa, 0x2d, 0xb1, 0x1e, 0x4e, 0x3d, 0xfe, 0x55, 0x3c, 0xb1, 0x1d, 0xe6, 0xf7, 0x1c,
	0x16, 0xf9, 0x2c, 0xd2, 0x7f, 0x1e, 0x47, 0xee, 0x49, 0x8f, 0x9f, 0x05, 0x34, 0xb2, 0x87, 0x73,
	0x9e, 0x26, 0x56, 0x4b, 0xd5, 0x5a, 0x01, 0x89, 0x30, 0xd4, 0xd6, 0xfe, 0xc2, 0x08, 0x29, 0xd8,
	0x9c, 0x53, 0x3e, 0x9e, 0x90, 0x19, 0x99, 0x3b, 0xd4, 0xac, 0xc8, 0xb2, 0x87, 0x6b, 0x97, 0x85,
	0xaa, 0xec, 0x12, 0x14, 0xc2, 0x60, 0x4e, 0xf9, 0x40, 0x1d, 0xe0, 0x17, 0x00, 0x38, 0x21, 0x15,
	0x15, 0xc7, 0x84, 0x9b, 0xb7, 0x3a, 0x46, 0x77, 0xf3, 0xa0, 0x65, 0x2b, 0x36, 0xec, 0x8c, 0x0d,
	0x7b, 0x94, 0xb1, 0x31, 0x78, 0x20, 0x3a, 0x48, 0x13, 0x6b, 0x47, 0xe1, 0x2e, 0x72, 0xd1, 0xcb,
	0x3f, 0x2c, 0x03, 0x37, 0xb4, 0xa1, 0xcf, 0xe1, 0xc7, 0xa0, 0x49, 0xa2, 0x88, 0xf2, 0xb1, 0x1e,
	0xa9, 0x60, 0xab, 0xda, 0x31, 0xba, 0x95, 0xc1, 0x3b, 0x69, 0x62, 0xdd, 0x53, 0xf9, 0x57, 0x23,
	0x10, 0xde, 0x92, 0xa6, 0x43, 0x65, 0x19, 0xba, 0x82, 0x6d, 0x2f, 0x1a, 0x4b, 0x26, 0x5d, 0xb3,
	0xd6, 0x31, 0xba, 0xf5, 0x65, 0xea, 0x72, 0x17, 0xc2, 0x75, 0x2f, 0x92, 0x02, 0x71, 0xe1, 0x53,
	0xb0, 0x45, 0x82, 0x60, 0xec, 0x93, 0x20, 0xf0, 0xe6, 0x53, 0x51, 0xb7, 0x2e, 0xeb, 0xee, 0xa5,
	0x89, 0x75, 0x57, 0xd7, 0x2d, 0xf8, 0x11, 0xbe, 0x4d, 0x82, 0xe0, 0x99, 0x3a, 0x0f, 0x5d, 0xf4,
	0x83, 0x01, 0xde, 0xfe, 0x2c, 0xa2, 0xa1, 0x12, 0x5c, 0x5f, 0x34, 0xa4, 0x9d, 0xf0, 0x21, 0xb8,
	0xc5, 0xbe, 0x9e, 0xd3, 0x50, 0x0b, 0xaf, 0x99, 0x26, 0xd6, 0x6d, 0x05, 0x29, 0xcd, 0x08, 0x2b,
	0x37, 0x7c, 0x01, 0xa0, 0x56, 0xe2, 0x52, 0x29, 0xb3, 0xdc, 0xd9, 0xe8, 0x6e, 0x1e, 0xbc, 0x6f,
	0xaf, 0x7c, 0x1a, 0xb6, 0x2a, 0x37, 0x62, 0xfd, 0xbc, 0x97, 0xc1, 0x83, 0x34, 0xb1, 0xf6, 0x0a,
	0xc2, 0x5e, 0x82, 0x43, 0xb8, 0xa9, 0x8c, 0x8b, 0x04, 0xf4, 0xbd, 0x01, 0xe0, 0x75, 0x1c, 0xf8,
	0xde, 0xb5, 0x91, 0x88, 0xfe, 0x2b, 0xc5, 0x7b, 0xc3, 0x18, 0xec, 0xc4, 0x91, 0xa8, 0x21, 0x59,
	0x51, 0xd8, 0xba, 0xe7, 0x47, 0xaf, 0xe9, 0x59, 0x0e, 0x67, 0xc4, 0x54, 0xc9, 0xac, 0xeb, 0xfb,
	0x69, 0x62, 0x99, 0xaa, 0xeb, 0x6b, 0x78, 0x08, 0x6f, 0x0b, 0x9b, 0xcc, 0x53, 0x59, 0xe8, 0x47,
	0x03, 0xec, 0xae, 0xc2, 0x81, 0x7b, 0xa0, 0xae, 0x52, 0xf3, 0x7e, 0x6b, 0xf2, 0xac, 0x64, 0xb1,
	0x58, 0x02, 0xe5, 0xff, 0xb4, 0x04, 0x46, 0xa0, 0x21, 0xbb, 0x71, 0x09, 0x27, 0xe6, 0x86, 0xbc,
	0xd5, 0xbb, 0xaf, 0xb9, 0x95, 0x20, 0x7f, 0x74, 0x7a, 0x48, 0x38, 0x59, 0x46, 0xcd, 0xb3, 0x11,
	0xae, 0x8b, 0x6f, 0xe1, 0x47, 0x3f, 0x95, 0x01, 0x58, 0x84, 0xc3, 0x47, 0xa0, 0xc6, 0x4f, 0xc7,
	0xe2, 0x05, 0x6a, 0x85, 0xc0, 0x34, 0xb1, 0xb6, 0x54, 0xbe, 0x76, 0x20, 0x5c, 0xe5, 0xa7, 0xa3,
	0xb3, 0x80, 0xc2, 0xcf, 0x41, 0x95, 0xf8, 0x2c, 0x9e, 0x73, 0x7d, 0x83, 0xa7, 0x6b, 0x3f, 0xef,
	0xb7, 0xb4, 0x9c, 0x25, 0x0a, 0xc2, 0x1a, 0x0e, 0x3e, 0x07, 0xb5, 0x6c, 0x71, 0xa8, 0x7d, 0xf5,
	0xd1, 0xda, 0xc8, 0xba, 0xe7, 0x7c, 0x69, 0x64, 0x80, 0xf0, 0x13, 0x75, 0x43, 0xcf, 0x57, 0x4b,
	0xe9, 0xe6, 0x75, 0xd1, 0xd2, 0xeb, 0x62, 0x69, 0x02, 0x9e, 0x4f, 0xd5, 0xae, 0x10, 0x53, 0x10,
	0x87, 0x5f, 0x0c, 0xb0, 0xa3, 0x78, 0x3f, 0x62, 0xec, 0x24, 0x0e, 0x46, 0x64, 0x32, 0xa3, 0x2b,
	0x1e, 0xb1, 0xb1, 0xd6, 0x23, 0x86, 0x5f, 0x82, 0x9a, 0x62, 0x35, 0xfa, 0x17, 0x09, 0x8f, 0xd8,
	0x09, 0x9d, 0x5f, 0x95, 0xf0, 0x12, 0x6d, 0x1a, 0x05, 0xe1, 0x0c, 0x0f, 0x9a, 0xa0, 0xe6, 0x88,
	0x39, 0xd3, 0x50, 0x8e, 0xb7, 0x82, 0xb3, 0x23, 0xfa, 0xdd, 0x00, 0xbb, 0xab, 0xf0, 0x6e, 0x92,
	0xf2, 0x13, 0x00, 0x72, 0xbd, 0xaa, 0x5e, 0x0b, 0x5a, 0x26, 0xae, 0x1b, 0xd2, 0x28, 0xa2, 0x11,
	0xc2, 0x8d, 0x4c, 0xcb, 0x11, 0xe4, 0xa0, 0xa9, 0xb7, 0xa6, 0xd8, 0xbe, 0x4a, 0x44, 0xea, 0x37,
	0x62, 0xb8, 0x36, 0xd5, 0xf7, 0x0a, 0x3f, 0x83, 0x39, 0x1e, 0xc2, 0xdb, 0xb9, 0xa9, 0xaf, 0x2c,
	0xdf, 0x1a, 0x60, 0x4f, 0xdd, 0xeb, 0xd3, 0x90, 0xb9, 0xb1, 0xc3, 0x0b, 0xbb, 0xf1, 0x7f, 0x53,
	0xb6, 0x0f, 0x1a, 0xd9, 0x90, 0xd4, 0x20, 0x2a, 0x85, 0x41, 0x64, 0x2e, 0x84, 0xeb, 0x7a, 0x76,
	0x11, 0xfa, 0xd9, 0x00, 0xf7, 0xd5, 0xda, 0x3f, 0x2c, 0xf6, 0x2a, 0x5e, 0xe3, 0x33, 0x12, 0x40,
	0xfb, 0xea, 0xe0, 0x07, 0x77, 0xd2, 0xc4, 0xda, 0x2e, 0x42, 0xa2, 0x05, 0x1b, 0xab, 0x06, 0x5b,
	0x7e, 0xd3, 0x83, 0x1d, 0xe0, 0xf3, 0xbf, 0xda, 0xa5, 0xef, 0x2e, 0xda, 0xa5, 0xf3, 0x8b, 0xb6,
	0xf1, 0xea, 0xa2, 0x6d, 0xfc, 0x79, 0xd1, 0x36, 0x5e, 0x5e, 0xb6, 0x4b, 0xaf, 0x2e, 0xdb, 0xa5,
	0x5f, 0x2f, 0xdb, 0xa5, 0xe7, 0x1f, 0x14, 0xaa, 0x0a, 0x1d, 0x3f, 0x66, 0xc7, 0xc7, 0x9e, 0xe3,
	0x91, 0x99, 0x3e, 0xf7, 0xf2, 0xff, 0xc7, 0x64, 0x0f, 0x93, 0xaa, 0x7c, 0x8f, 0x4f, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xf0, 0xb4, 0xf5, 0xe9, 0xad, 0x09, 0x00, 0x00,
}

func (m *Locker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppMappingId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x40
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AssetDepositId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetDepositId))
		i--
		dAtA[i] = 0x30
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLocker(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size := m.NetBalance.Size()
		i -= size
		if _, err := m.NetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ReturnsAccumulated.Size()
		i -= size
		if _, err := m.ReturnsAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LockerId) > 0 {
		i -= len(m.LockerId)
		copy(dAtA[i:], m.LockerId)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.LockerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLockerAssetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLockerAssetMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLockerAssetMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerAppMapping) > 0 {
		for iNdEx := len(m.LockerAppMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockerAppMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockerToAppMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerToAppMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerToAppMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAssetLocker) > 0 {
		for iNdEx := len(m.UserAssetLocker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAssetLocker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppMappingId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetToLockerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetToLockerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetToLockerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserData) > 0 {
		for iNdEx := len(m.UserData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LockerId) > 0 {
		i -= len(m.LockerId)
		copy(dAtA[i:], m.LockerId)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.LockerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserTxData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTxData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTxData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TxTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TxTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLocker(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxType) > 0 {
		i -= len(m.TxType)
		copy(dAtA[i:], m.TxType)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.TxType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockerLookupTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerLookupTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerLookupTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Lockers) > 0 {
		for iNdEx := len(m.Lockers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lockers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppMappingId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenToLockerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenToLockerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenToLockerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintLocker(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerProductAssetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerProductAssetMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerProductAssetMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		dAtA4 := make([]byte, len(m.AssetIds)*10)
		var j3 int
		for _, num := range m.AssetIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintLocker(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.AppMappingId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppMappingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockedDepositedAmountDataMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDepositedAmountDataMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDepositedAmountDataMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocker(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Locker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LockerId)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = m.ReturnsAccumulated.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = m.NetBalance.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovLocker(uint64(l))
	if m.AssetDepositId != 0 {
		n += 1 + sovLocker(uint64(m.AssetDepositId))
	}
	if m.IsLocked {
		n += 2
	}
	if m.AppMappingId != 0 {
		n += 1 + sovLocker(uint64(m.AppMappingId))
	}
	return n
}

func (m *UserLockerAssetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if len(m.LockerAppMapping) > 0 {
		for _, e := range m.LockerAppMapping {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	return n
}

func (m *LockerToAppMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppMappingId != 0 {
		n += 1 + sovLocker(uint64(m.AppMappingId))
	}
	if len(m.UserAssetLocker) > 0 {
		for _, e := range m.UserAssetLocker {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	return n
}

func (m *AssetToLockerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	l = len(m.LockerId)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if len(m.UserData) > 0 {
		for _, e := range m.UserData {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	return n
}

func (m *UserTxData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxType)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TxTime)
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *LockerLookupTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppMappingId != 0 {
		n += 1 + sovLocker(uint64(m.AppMappingId))
	}
	if len(m.Lockers) > 0 {
		for _, e := range m.Lockers {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovLocker(uint64(m.Counter))
	}
	return n
}

func (m *TokenToLockerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	l = m.DepositedAmount.Size()
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *LockerProductAssetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppMappingId != 0 {
		n += 1 + sovLocker(uint64(m.AppMappingId))
	}
	if len(m.AssetIds) > 0 {
		l = 0
		for _, e := range m.AssetIds {
			l += sovLocker(uint64(e))
		}
		n += 1 + sovLocker(uint64(l)) + l
	}
	return n
}

func (m *LockedDepositedAmountDataMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	l = m.DepositedAmount.Size()
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func sovLocker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocker(x uint64) (n int) {
	return sovLocker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Locker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnsAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDepositId", wireType)
			}
			m.AssetDepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetDepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLockerAssetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLockerAssetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLockerAssetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerAppMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerAppMapping = append(m.LockerAppMapping, &LockerToAppMapping{})
			if err := m.LockerAppMapping[len(m.LockerAppMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerToAppMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerToAppMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerToAppMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssetLocker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAssetLocker = append(m.UserAssetLocker, &AssetToLockerMapping{})
			if err := m.UserAssetLocker[len(m.UserAssetLocker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetToLockerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetToLockerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetToLockerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserData = append(m.UserData, &UserTxData{})
			if err := m.UserData[len(m.UserData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTxData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTxData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTxData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TxTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerLookupTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerLookupTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerLookupTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lockers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lockers = append(m.Lockers, &TokenToLockerMapping{})
			if err := m.Lockers[len(m.Lockers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenToLockerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenToLockerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenToLockerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerProductAssetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerProductAssetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerProductAssetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMappingId", wireType)
			}
			m.AppMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetIds = append(m.AssetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLocker
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLocker
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetIds) == 0 {
					m.AssetIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetIds = append(m.AssetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDepositedAmountDataMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDepositedAmountDataMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDepositedAmountDataMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocker = fmt.Errorf("proto: unexpected end of group")
)
